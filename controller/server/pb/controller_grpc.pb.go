// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.2
// source: proto/controller.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskDistribution_GetProbeDestinations_FullMethodName = "/Controller.TaskDistribution/GetProbeDestinations"
)

// TaskDistributionClient is the client API for TaskDistribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务定义
type TaskDistributionClient interface {
	// 任务分发方法
	GetProbeDestinations(ctx context.Context, in *AgentGetTaskRequest, opts ...grpc.CallOption) (*ControllerTaskReply, error)
}

type taskDistributionClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskDistributionClient(cc grpc.ClientConnInterface) TaskDistributionClient {
	return &taskDistributionClient{cc}
}

func (c *taskDistributionClient) GetProbeDestinations(ctx context.Context, in *AgentGetTaskRequest, opts ...grpc.CallOption) (*ControllerTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControllerTaskReply)
	err := c.cc.Invoke(ctx, TaskDistribution_GetProbeDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskDistributionServer is the server API for TaskDistribution service.
// All implementations must embed UnimplementedTaskDistributionServer
// for forward compatibility.
//
// 服务定义
type TaskDistributionServer interface {
	// 任务分发方法
	GetProbeDestinations(context.Context, *AgentGetTaskRequest) (*ControllerTaskReply, error)
	mustEmbedUnimplementedTaskDistributionServer()
}

// UnimplementedTaskDistributionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskDistributionServer struct{}

func (UnimplementedTaskDistributionServer) GetProbeDestinations(context.Context, *AgentGetTaskRequest) (*ControllerTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProbeDestinations not implemented")
}
func (UnimplementedTaskDistributionServer) mustEmbedUnimplementedTaskDistributionServer() {}
func (UnimplementedTaskDistributionServer) testEmbeddedByValue()                          {}

// UnsafeTaskDistributionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskDistributionServer will
// result in compilation errors.
type UnsafeTaskDistributionServer interface {
	mustEmbedUnimplementedTaskDistributionServer()
}

func RegisterTaskDistributionServer(s grpc.ServiceRegistrar, srv TaskDistributionServer) {
	// If the following call pancis, it indicates UnimplementedTaskDistributionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskDistribution_ServiceDesc, srv)
}

func _TaskDistribution_GetProbeDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskDistributionServer).GetProbeDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskDistribution_GetProbeDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskDistributionServer).GetProbeDestinations(ctx, req.(*AgentGetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskDistribution_ServiceDesc is the grpc.ServiceDesc for TaskDistribution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskDistribution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Controller.TaskDistribution",
	HandlerType: (*TaskDistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProbeDestinations",
			Handler:    _TaskDistribution_GetProbeDestinations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controller.proto",
}

const (
	ProbeStatus_ReportProbeStatus_FullMethodName = "/Controller.ProbeStatus/ReportProbeStatus"
)

// ProbeStatusClient is the client API for ProbeStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务定义
type ProbeStatusClient interface {
	// 探针上报方法
	ReportProbeStatus(ctx context.Context, in *AgentUploadReportRequest, opts ...grpc.CallOption) (*ControllerResponseReply, error)
}

type probeStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeStatusClient(cc grpc.ClientConnInterface) ProbeStatusClient {
	return &probeStatusClient{cc}
}

func (c *probeStatusClient) ReportProbeStatus(ctx context.Context, in *AgentUploadReportRequest, opts ...grpc.CallOption) (*ControllerResponseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControllerResponseReply)
	err := c.cc.Invoke(ctx, ProbeStatus_ReportProbeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeStatusServer is the server API for ProbeStatus service.
// All implementations must embed UnimplementedProbeStatusServer
// for forward compatibility.
//
// 服务定义
type ProbeStatusServer interface {
	// 探针上报方法
	ReportProbeStatus(context.Context, *AgentUploadReportRequest) (*ControllerResponseReply, error)
	mustEmbedUnimplementedProbeStatusServer()
}

// UnimplementedProbeStatusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProbeStatusServer struct{}

func (UnimplementedProbeStatusServer) ReportProbeStatus(context.Context, *AgentUploadReportRequest) (*ControllerResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProbeStatus not implemented")
}
func (UnimplementedProbeStatusServer) mustEmbedUnimplementedProbeStatusServer() {}
func (UnimplementedProbeStatusServer) testEmbeddedByValue()                     {}

// UnsafeProbeStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeStatusServer will
// result in compilation errors.
type UnsafeProbeStatusServer interface {
	mustEmbedUnimplementedProbeStatusServer()
}

func RegisterProbeStatusServer(s grpc.ServiceRegistrar, srv ProbeStatusServer) {
	// If the following call pancis, it indicates UnimplementedProbeStatusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProbeStatus_ServiceDesc, srv)
}

func _ProbeStatus_ReportProbeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUploadReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeStatusServer).ReportProbeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProbeStatus_ReportProbeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeStatusServer).ReportProbeStatus(ctx, req.(*AgentUploadReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProbeStatus_ServiceDesc is the grpc.ServiceDesc for ProbeStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Controller.ProbeStatus",
	HandlerType: (*ProbeStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportProbeStatus",
			Handler:    _ProbeStatus_ReportProbeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controller.proto",
}

const (
	ProbeData_ReportProbeData_FullMethodName = "/Controller.ProbeData/ReportProbeData"
)

// ProbeDataClient is the client API for ProbeData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务定义
type ProbeDataClient interface {
	// 探针数据上报方法
	ReportProbeData(ctx context.Context, in *AgentUploadDataRequest, opts ...grpc.CallOption) (*ControllerResponseReply, error)
}

type probeDataClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeDataClient(cc grpc.ClientConnInterface) ProbeDataClient {
	return &probeDataClient{cc}
}

func (c *probeDataClient) ReportProbeData(ctx context.Context, in *AgentUploadDataRequest, opts ...grpc.CallOption) (*ControllerResponseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControllerResponseReply)
	err := c.cc.Invoke(ctx, ProbeData_ReportProbeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeDataServer is the server API for ProbeData service.
// All implementations must embed UnimplementedProbeDataServer
// for forward compatibility.
//
// 服务定义
type ProbeDataServer interface {
	// 探针数据上报方法
	ReportProbeData(context.Context, *AgentUploadDataRequest) (*ControllerResponseReply, error)
	mustEmbedUnimplementedProbeDataServer()
}

// UnimplementedProbeDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProbeDataServer struct{}

func (UnimplementedProbeDataServer) ReportProbeData(context.Context, *AgentUploadDataRequest) (*ControllerResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProbeData not implemented")
}
func (UnimplementedProbeDataServer) mustEmbedUnimplementedProbeDataServer() {}
func (UnimplementedProbeDataServer) testEmbeddedByValue()                   {}

// UnsafeProbeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeDataServer will
// result in compilation errors.
type UnsafeProbeDataServer interface {
	mustEmbedUnimplementedProbeDataServer()
}

func RegisterProbeDataServer(s grpc.ServiceRegistrar, srv ProbeDataServer) {
	// If the following call pancis, it indicates UnimplementedProbeDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProbeData_ServiceDesc, srv)
}

func _ProbeData_ReportProbeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUploadDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeDataServer).ReportProbeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProbeData_ReportProbeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeDataServer).ReportProbeData(ctx, req.(*AgentUploadDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProbeData_ServiceDesc is the grpc.ServiceDesc for ProbeData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProbeData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Controller.ProbeData",
	HandlerType: (*ProbeDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportProbeData",
			Handler:    _ProbeData_ReportProbeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controller.proto",
}
